
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/GPU/example_learn_straight_line_readouts.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_GPU_example_learn_straight_line_readouts.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_GPU_example_learn_straight_line_readouts.py:


===================================
Learn Straight line readout pattern
===================================

A small pytorch example to showcase learning k-space sampling patterns.
In this example we learn the 2D sampling pattern for a 3D MRI image, assuming
straight line readouts. This example showcases the auto-diff capabilities of the NUFFT operator
The image resolution is kept small to reduce computation time.

.. warning:: This example only showcases the autodiff capabilities, the learned
    sampling pattern is not scanner compliant as the scanner gradients required
    to implement it violate the hardware constraints. In practice, a projection
    :math:`\Pi_\mathcal{Q}(\mathbf{K})` into the scanner constraints set
    :math:`\mathcal{Q}` is recommended (see [Proj]_). This is implemented in the
    proprietary SPARKLING package [Sparks]_. Users are encouraged to contact the
    authors if they want to use it.

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. colab-link::
   :needs_gpu: 1

   !pip install mri-nufft[gpunufft]

.. GENERATED FROM PYTHON SOURCE LINES 29-31

Imports
-------

.. GENERATED FROM PYTHON SOURCE LINES 31-46

.. code-block:: Python

    import os
    import time
    import joblib

    import brainweb_dl as bwdl
    import matplotlib.pyplot as plt
    import numpy as np
    import torch
    from tqdm import tqdm
    from PIL import Image, ImageSequence

    from mrinufft import get_operator

    BACKEND = os.environ.get("MRINUFFT_BACKEND", "gpunufft")








.. GENERATED FROM PYTHON SOURCE LINES 47-52

Setup a simple class to learn trajectory
----------------------------------------
.. note::
    While we are only learning the NUFFT operator, we still need the gradient `wrt_data=True` to have all the gradients computed correctly.
    See [Projector]_ for more details.

.. GENERATED FROM PYTHON SOURCE LINES 52-129

.. code-block:: Python



    class Model(torch.nn.Module):
        def __init__(self, num_shots, img_size, factor_cartesian=0.3):
            super(Model, self).__init__()
            self.num_samples_per_shot = 128
            cart_del = 1 / img_size[0]
            num_cart_points = np.round(np.sqrt(factor_cartesian * num_shots)).astype(int)
            edge_center = cart_del * num_cart_points / 2

            self.central_points = torch.nn.Parameter(
                data=torch.stack(
                    torch.meshgrid(
                        torch.linspace(
                            -edge_center, edge_center, num_cart_points, dtype=torch.float32
                        ),
                        torch.linspace(
                            -edge_center, edge_center, num_cart_points, dtype=torch.float32
                        ),
                        indexing="ij",
                    ),
                    axis=-1,
                ).reshape(-1, 2),
                requires_grad=False,
            )
            self.non_center_points = torch.nn.Parameter(
                data=torch.Tensor(
                    np.random.random((num_shots - self.central_points.shape[0], 2)).astype(
                        np.float32
                    )
                    - 0.5
                ),
                requires_grad=True,
            )
            self.operator = get_operator(BACKEND, wrt_data=True, wrt_traj=True)(
                np.random.random(
                    (self.get_2D_points().shape[0] * self.num_samples_per_shot, 3)
                ).astype(np.float32)
                - 0.5,
                shape=img_size,
                density=True,
                squeeze_dims=False,
            )

        def get_trajectory(self, get_as_shot=False):
            samples = self._get_3D_points(self.get_2D_points())
            if not get_as_shot:
                return samples
            return samples.reshape(-1, self.num_samples_per_shot, 3)

        def get_2D_points(self):
            return torch.vstack([self.central_points, self.non_center_points])

        def _get_3D_points(self, samples2D):
            line = torch.linspace(
                -0.5,
                0.5,
                self.num_samples_per_shot,
                device=samples2D.device,
                dtype=samples2D.dtype,
            )
            return torch.stack(
                [
                    line.repeat(samples2D.shape[0], 1),
                    samples2D[:, 0].repeat(self.num_samples_per_shot, 1).T,
                    samples2D[:, 1].repeat(self.num_samples_per_shot, 1).T,
                ],
                dim=-1,
            ).reshape(-1, 3)

        def forward(self, x):
            self.operator.samples = self.get_trajectory()
            kspace = self.operator.op(x)
            adjoint = self.operator.adj_op(kspace).abs()
            return adjoint / torch.mean(adjoint)









.. GENERATED FROM PYTHON SOURCE LINES 130-132

Util function to plot the state of the model
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 132-177

.. code-block:: Python



    def plot_state(mri_2D, traj, recon, loss=None, save_name=None, i=None):
        fig_grid = (2, 2)
        if loss is None:
            fig_grid = (1, 3)
        fig, axs = plt.subplots(*fig_grid, figsize=tuple(i * 5 for i in fig_grid[::-1]))
        axs = axs.flatten()
        axs[0].imshow(np.abs(mri_2D[0][..., 11]), cmap="gray")
        axs[0].axis("off")
        axs[0].set_title("MR Image")
        if traj.shape[-1] == 3:
            if i is not None and i > 20:
                axs[1].scatter(*traj.T[1:3, 0], s=10, color="blue")
            else:
                fig_kwargs = {}
                plt_kwargs = {"s": 1, "alpha": 0.2}
                if i is not None:
                    fig_kwargs["azim"], fig_kwargs["elev"] = (
                        i / 25 * 60 - 60,
                        30 - i / 25 * 30,
                    )
                    plt_kwargs["alpha"] = 0.2 + 0.8 * i / 20
                    plt_kwargs["s"] = 1 + 9 * i / 20
                axs[1].remove()
                axs[1] = fig.add_subplot(*fig_grid, 2, projection="3d", **fig_kwargs)
                for shot in traj:
                    axs[1].scatter(*shot.T, color="blue", **plt_kwargs)
        else:
            axs[1].scatter(*traj.T, s=10)
        axs[1].set_title("Trajectory")
        axs[2].imshow(np.abs(recon[0][0][..., 11].detach().cpu().numpy()), cmap="gray")
        axs[2].axis("off")
        axs[2].set_title("Reconstruction")
        if loss is not None:
            axs[3].plot(loss)
            axs[3].grid("on")
            axs[3].set_title("Loss")
        if save_name is not None:
            plt.savefig(save_name, bbox_inches="tight")
            plt.close()
        else:
            plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 178-180

Setup model and optimizer
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 180-184

.. code-block:: Python


    cart_data = np.flipud(bwdl.get_mri(4, "T1")).T[::8, ::8, ::8].astype(np.complex64)
    model = Model(253, cart_data.shape)
    optimizer = torch.optim.Adam(model.parameters(), lr=1e-2)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:99: UserWarning: Samples will be rescaled to [-0.5, 0.5), assuming they were in [-pi, pi)
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 185-187

Setup data
----------

.. GENERATED FROM PYTHON SOURCE LINES 187-193

.. code-block:: Python


    mri_3D = torch.Tensor(cart_data)[None]
    mri_3D = mri_3D / torch.mean(mri_3D)
    model.eval()
    recon = model(mri_3D)
    plot_state(mri_3D, model.get_trajectory(True).detach().cpu().numpy(), recon)



.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_learn_straight_line_readouts_001.png
   :alt: MR Image, Reconstruction, Trajectory
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_learn_straight_line_readouts_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/mri-nufft/examples/GPU/example_learn_straight_line_readouts.py:188: UserWarning: Casting complex values to real discards the imaginary part (Triggered internally at /pytorch/aten/src/ATen/native/Copy.cpp:307.)
      mri_3D = torch.Tensor(cart_data)[None]
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:99: UserWarning: Samples will be rescaled to [-0.5, 0.5), assuming they were in [-pi, pi)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/mri-nufft/examples/GPU/example_learn_straight_line_readouts.py:140: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)
      axs[0].imshow(np.abs(mri_2D[0][..., 11]), cmap="gray")




.. GENERATED FROM PYTHON SOURCE LINES 194-196

Start training loop
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 196-239

.. code-block:: Python

    losses = []
    image_files = []
    model.train()
    with tqdm(range(40), unit="steps") as tqdms:
        for i in tqdms:
            out = model(mri_3D)
            loss = torch.nn.functional.mse_loss(out, mri_3D[None])
            numpy_loss = loss.detach().cpu().numpy()
            tqdms.set_postfix({"loss": numpy_loss})
            losses.append(numpy_loss)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            with torch.no_grad():
                # Clamp the value of trajectory between [-0.5, 0.5]
                for param in model.parameters():
                    param.clamp_(-0.5, 0.5)
            # Generate images for gif
            hashed = joblib.hash((i, "learn_line", time.time()))
            filename = "/tmp/" + f"{hashed}.png"
            plot_state(
                mri_3D,
                model.get_trajectory(True).detach().cpu().numpy(),
                out,
                losses,
                save_name=filename,
                i=i,
            )
            image_files.append(filename)

    # Make a GIF of all images.
    imgs = [Image.open(img) for img in image_files]
    imgs[0].save(
        "mrinufft_learn_2d_sampling_pattern.gif",
        save_all=True,
        append_images=imgs[1:],
        optimize=False,
        duration=2,
        loop=0,
    )

    # sphinx_gallery_thumbnail_path = 'generated/autoexamples/GPU/images/mrinufft_learn_2d_sampling_pattern.gif'





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/40 [00:00<?, ?steps/s]      0%|          | 0/40 [00:00<?, ?steps/s, loss=0.6230594]      2%|▎         | 1/40 [00:05<03:28,  5.35s/steps, loss=0.6230594]      2%|▎         | 1/40 [00:05<03:28,  5.35s/steps, loss=0.5585054]      5%|▌         | 2/40 [00:10<03:20,  5.28s/steps, loss=0.5585054]      5%|▌         | 2/40 [00:10<03:20,  5.28s/steps, loss=0.5494938]      8%|▊         | 3/40 [00:15<03:15,  5.27s/steps, loss=0.5494938]      8%|▊         | 3/40 [00:15<03:15,  5.27s/steps, loss=0.5345063]     10%|█         | 4/40 [00:21<03:14,  5.41s/steps, loss=0.5345063]     10%|█         | 4/40 [00:21<03:14,  5.41s/steps, loss=0.52018887]     12%|█▎        | 5/40 [00:26<03:08,  5.38s/steps, loss=0.52018887]     12%|█▎        | 5/40 [00:26<03:08,  5.38s/steps, loss=0.5177384]      15%|█▌        | 6/40 [00:32<03:06,  5.48s/steps, loss=0.5177384]     15%|█▌        | 6/40 [00:32<03:06,  5.48s/steps, loss=0.5154187]     18%|█▊        | 7/40 [00:37<02:59,  5.45s/steps, loss=0.5154187]     18%|█▊        | 7/40 [00:37<02:59,  5.45s/steps, loss=0.5091677]     20%|██        | 8/40 [00:43<02:58,  5.57s/steps, loss=0.5091677]     20%|██        | 8/40 [00:43<02:58,  5.57s/steps, loss=0.5024967]     22%|██▎       | 9/40 [00:49<02:51,  5.53s/steps, loss=0.5024967]     22%|██▎       | 9/40 [00:49<02:51,  5.53s/steps, loss=0.49633187]     25%|██▌       | 10/40 [00:55<02:49,  5.64s/steps, loss=0.49633187]     25%|██▌       | 10/40 [00:55<02:49,  5.64s/steps, loss=0.49179006]     28%|██▊       | 11/40 [01:00<02:42,  5.61s/steps, loss=0.49179006]     28%|██▊       | 11/40 [01:00<02:42,  5.61s/steps, loss=0.4889184]      30%|███       | 12/40 [01:05<02:35,  5.54s/steps, loss=0.4889184]     30%|███       | 12/40 [01:05<02:35,  5.54s/steps, loss=0.4889436]     32%|███▎      | 13/40 [01:11<02:30,  5.58s/steps, loss=0.4889436]     32%|███▎      | 13/40 [01:11<02:30,  5.58s/steps, loss=0.48897168]     35%|███▌      | 14/40 [01:16<02:22,  5.48s/steps, loss=0.48897168]     35%|███▌      | 14/40 [01:16<02:22,  5.48s/steps, loss=0.48935267]     38%|███▊      | 15/40 [01:22<02:17,  5.49s/steps, loss=0.48935267]     38%|███▊      | 15/40 [01:22<02:17,  5.49s/steps, loss=0.48838666]     40%|████      | 16/40 [01:27<02:10,  5.42s/steps, loss=0.48838666]     40%|████      | 16/40 [01:27<02:10,  5.42s/steps, loss=0.48308977]     42%|████▎     | 17/40 [01:33<02:05,  5.45s/steps, loss=0.48308977]     42%|████▎     | 17/40 [01:33<02:05,  5.45s/steps, loss=0.47681817]     45%|████▌     | 18/40 [01:38<01:57,  5.34s/steps, loss=0.47681817]     45%|████▌     | 18/40 [01:38<01:57,  5.34s/steps, loss=0.4739063]      48%|████▊     | 19/40 [01:43<01:52,  5.37s/steps, loss=0.4739063]     48%|████▊     | 19/40 [01:43<01:52,  5.37s/steps, loss=0.47403327]     50%|█████     | 20/40 [01:48<01:47,  5.35s/steps, loss=0.47403327]     50%|█████     | 20/40 [01:49<01:47,  5.35s/steps, loss=0.47544292]     52%|█████▎    | 21/40 [01:54<01:42,  5.41s/steps, loss=0.47544292]     52%|█████▎    | 21/40 [01:54<01:42,  5.41s/steps, loss=0.47507793]     55%|█████▌    | 22/40 [01:55<01:10,  3.94s/steps, loss=0.47507793]     55%|█████▌    | 22/40 [01:55<01:10,  3.94s/steps, loss=0.4715826]      57%|█████▊    | 23/40 [01:55<00:49,  2.90s/steps, loss=0.4715826]     57%|█████▊    | 23/40 [01:55<00:49,  2.90s/steps, loss=0.46877998]     60%|██████    | 24/40 [01:55<00:34,  2.18s/steps, loss=0.46877998]     60%|██████    | 24/40 [01:56<00:34,  2.18s/steps, loss=0.46845067]     62%|██████▎   | 25/40 [01:56<00:24,  1.66s/steps, loss=0.46845067]     62%|██████▎   | 25/40 [01:56<00:24,  1.66s/steps, loss=0.46798328]     65%|██████▌   | 26/40 [01:56<00:18,  1.32s/steps, loss=0.46798328]     65%|██████▌   | 26/40 [01:57<00:18,  1.32s/steps, loss=0.4662522]      68%|██████▊   | 27/40 [01:57<00:13,  1.06s/steps, loss=0.4662522]     68%|██████▊   | 27/40 [01:57<00:13,  1.06s/steps, loss=0.4635704]     70%|███████   | 28/40 [01:57<00:10,  1.12steps/s, loss=0.4635704]     70%|███████   | 28/40 [01:57<00:10,  1.12steps/s, loss=0.46094716]     72%|███████▎  | 29/40 [01:58<00:08,  1.30steps/s, loss=0.46094716]     72%|███████▎  | 29/40 [01:58<00:08,  1.30steps/s, loss=0.45941678]     75%|███████▌  | 30/40 [01:59<00:07,  1.31steps/s, loss=0.45941678]     75%|███████▌  | 30/40 [01:59<00:07,  1.31steps/s, loss=0.45993665]     78%|███████▊  | 31/40 [01:59<00:06,  1.45steps/s, loss=0.45993665]     78%|███████▊  | 31/40 [01:59<00:06,  1.45steps/s, loss=0.4624863]      80%|████████  | 32/40 [02:00<00:04,  1.61steps/s, loss=0.4624863]     80%|████████  | 32/40 [02:00<00:04,  1.61steps/s, loss=0.4617252]     82%|████████▎ | 33/40 [02:00<00:04,  1.70steps/s, loss=0.4617252]     82%|████████▎ | 33/40 [02:00<00:04,  1.70steps/s, loss=0.4604386]     85%|████████▌ | 34/40 [02:01<00:03,  1.82steps/s, loss=0.4604386]     85%|████████▌ | 34/40 [02:01<00:03,  1.82steps/s, loss=0.4590614]     88%|████████▊ | 35/40 [02:01<00:02,  1.84steps/s, loss=0.4590614]     88%|████████▊ | 35/40 [02:01<00:02,  1.84steps/s, loss=0.45869625]     90%|█████████ | 36/40 [02:02<00:02,  1.91steps/s, loss=0.45869625]     90%|█████████ | 36/40 [02:02<00:02,  1.91steps/s, loss=0.4572455]      92%|█████████▎| 37/40 [02:02<00:01,  1.96steps/s, loss=0.4572455]     92%|█████████▎| 37/40 [02:02<00:01,  1.96steps/s, loss=0.45419976]     95%|█████████▌| 38/40 [02:03<00:00,  2.01steps/s, loss=0.45419976]     95%|█████████▌| 38/40 [02:03<00:00,  2.01steps/s, loss=0.4525639]      98%|█████████▊| 39/40 [02:03<00:00,  1.81steps/s, loss=0.4525639]     98%|█████████▊| 39/40 [02:03<00:00,  1.81steps/s, loss=0.4528082]    100%|██████████| 40/40 [02:04<00:00,  1.90steps/s, loss=0.4528082]    100%|██████████| 40/40 [02:04<00:00,  3.11s/steps, loss=0.4528082]




.. GENERATED FROM PYTHON SOURCE LINES 269-273

.. image-sg:: /generated/autoexamples/GPU/images/mrinufft_learn_2d_sampling_pattern.gif
   :alt: example learn_samples
   :srcset: /generated/autoexamples/GPU/images/mrinufft_learn_2d_sampling_pattern.gif
   :class: sphx-glr-single-img

.. GENERATED FROM PYTHON SOURCE LINES 275-277

Trained trajectory
------------------

.. GENERATED FROM PYTHON SOURCE LINES 277-282

.. code-block:: Python

    model.eval()
    recon = model(mri_3D)
    plot_state(mri_3D, model.get_trajectory(True).detach().cpu().numpy(), recon, losses)
    plt.show()




.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_learn_straight_line_readouts_002.png
   :alt: MR Image, Reconstruction, Loss, Trajectory
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_learn_straight_line_readouts_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 283-298

References
==========

.. [Proj] N. Chauffert, P. Weiss, J. Kahn and P. Ciuciu, "A Projection Algorithm for
          Gradient Waveforms Design in Magnetic Resonance Imaging," in
          IEEE Transactions on Medical Imaging, vol. 35, no. 9, pp. 2026-2039, Sept. 2016,
          doi: 10.1109/TMI.2016.2544251.
.. [Sparks] G. R. Chaithya, P. Weiss, G. Daval-Frérot, A. Massire, A. Vignaud and P. Ciuciu,
          "Optimizing Full 3D SPARKLING Trajectories for High-Resolution Magnetic
          Resonance Imaging," in IEEE Transactions on Medical Imaging, vol. 41, no. 8,
          pp. 2105-2117, Aug. 2022, doi: 10.1109/TMI.2022.3157269.
.. [Projector] Chaithya GR, and Philippe Ciuciu. 2023. "Jointly Learning Non-Cartesian
          k-Space Trajectories and Reconstruction Networks for 2D and 3D MR Imaging
          through Projection" Bioengineering 10, no. 2: 158.
          https://doi.org/10.3390/bioengineering10020158


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 14.923 seconds)


.. _sphx_glr_download_generated_autoexamples_GPU_example_learn_straight_line_readouts.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mind-inria/mri-nufft/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/GPU/example_learn_straight_line_readouts.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_learn_straight_line_readouts.ipynb <example_learn_straight_line_readouts.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_learn_straight_line_readouts.py <example_learn_straight_line_readouts.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_learn_straight_line_readouts.zip <example_learn_straight_line_readouts.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
