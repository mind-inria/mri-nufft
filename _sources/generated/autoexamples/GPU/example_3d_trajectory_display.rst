
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/GPU/example_3d_trajectory_display.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_GPU_example_3d_trajectory_display.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_GPU_example_3d_trajectory_display.py:


==========================
Gridded trajectory display
==========================

In this example, we show some tools available to display 3D trajectories.
It can be used to understand the k-space sampling patterns, visualize the trajectories, see the sampling times, gradient strengths, slew rates etc.
Another key feature is to display the sampling density in k-space, for example to check for k-space holes or irregularities in the learning-based trajectories that would lead to artifacts in the images.

.. GENERATED FROM PYTHON SOURCE LINES 12-25

.. code-block:: Python


    # Imports
    import os
    from mrinufft.trajectories.display3D import get_gridded_trajectory
    import mrinufft.trajectories.trajectory3D as mtt
    from mrinufft.trajectories.utils import Gammas, Acquisition
    import matplotlib.pyplot as plt
    import numpy as np


    BACKEND = os.environ.get("MRINUFFT_BACKEND", "gpunufft")









.. GENERATED FROM PYTHON SOURCE LINES 26-29

Acquisition parameters
======================
Here we use acquisition defaults for the  trajectory gridding.

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: Python


    acq = Acquisition.default









.. GENERATED FROM PYTHON SOURCE LINES 34-37

Helper function to Displaying 3D Gridded Trajectories
=====================================================
Utility function to plot mid-plane slices for 3D volumes

.. GENERATED FROM PYTHON SOURCE LINES 37-56

.. code-block:: Python

    def plot_slices(axs, volume, title=""):
        def set_labels(ax, axis_num=None):
            ax.set_xticks([0, 32, 64])
            ax.set_yticks([0, 32, 64])
            ax.set_xticklabels([r"$-\pi$", 0, r"$\pi$"])
            ax.set_yticklabels([r"$-\pi$", 0, r"$\pi$"])
            if axis_num is not None:
                ax.set_xlabel(r"$k_" + "zxy"[axis_num] + r"$")
                ax.set_ylabel(r"$k_" + "yzx"[axis_num] + r"$")

        for i in range(3):
            volume = np.rollaxis(volume, i, 0)
            axs[i].imshow(volume[volume.shape[0] // 2])
            axs[i].set_title(
                ((title + f"\n") if i == 0 else "") + r"$k_{" + "xyz"[i] + r"}=0$"
            )
            set_labels(axs[i], i)









.. GENERATED FROM PYTHON SOURCE LINES 57-62

Helper function to Displaying 3D Trajectories
=============================================
Helper function to showcase the features of `get_gridded_trajectory` function
This function will first grid the trajectory using the `get_gridded_trajectory`
function and then plot the mid-plane slices of the gridded trajectory.

.. GENERATED FROM PYTHON SOURCE LINES 62-77

.. code-block:: Python

    def create_grid(grid_type, trajectories, traj_params, **kwargs):
        fig, axs = plt.subplots(3, 3, figsize=(10, 10))
        plt.subplots_adjust(hspace=0.5)
        for i, (name, traj) in enumerate(trajectories.items()):
            grid = get_gridded_trajectory(
                traj,
                acq,
                grid_type=grid_type,
                backend=BACKEND,
                osf=2,
                **kwargs,
            )
            plot_slices(axs[:, i], grid, title=name)









.. GENERATED FROM PYTHON SOURCE LINES 78-81

Trajectories to display
=======================
We instantiate a bunch of sampling trajectories to display hereafter with `get_gridded_trajectory` and previous helper functions.

.. GENERATED FROM PYTHON SOURCE LINES 81-92

.. code-block:: Python

    trajectories = {
        "Radial": mtt.initialize_3D_phyllotaxis_radial(64 * 8, 64),
        "FLORET": mtt.initialize_3D_floret(64 * 8, 64, nb_revolutions=2),
        "Seiffert Spirals": mtt.initialize_3D_seiffert_spiral(64 * 8, 64),
    }
    traj_params = {
        "FOV": (0.23, 0.23, 0.23),
        "img_size": (64, 64, 64),
        "gamma": Gammas.HYDROGEN,
    }








.. GENERATED FROM PYTHON SOURCE LINES 93-96

Sampling density
=================
Display the density of the trajectories, along the 3 mid-planes. For this, make `grid_type="density"`.

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: Python

    create_grid("density", trajectories, traj_params)
    plt.suptitle("Sampling Density", y=0.98, x=0.52, fontsize=20)
    plt.show()





.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_001.png
   :alt: Sampling Density, Radial $k_{x}=0$, FLORET $k_{x}=0$, Seiffert Spirals $k_{x}=0$, $k_{y}=0$, $k_{y}=0$, $k_{y}=0$, $k_{z}=0$, $k_{z}=0$, $k_{z}=0$
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 102-107

Sampling time
=============
Display the sampling times over the trajectories. For this, make `grid_type="time"`.
It helps to check the sampling times over the k-space trajectories, which can be responsible for excessive off-resonance artifacts.
Note that this is just a relative visualization of sample times on a colour scale, and the actual sampling time.

.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: Python

    create_grid("time", trajectories, traj_params)
    plt.suptitle("Sampling Time", y=0.98, x=0.52, fontsize=20)
    plt.show()




.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_002.png
   :alt: Sampling Time, Radial $k_{x}=0$, FLORET $k_{x}=0$, Seiffert Spirals $k_{x}=0$, $k_{y}=0$, $k_{y}=0$, $k_{y}=0$, $k_{z}=0$, $k_{z}=0$, $k_{z}=0$
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 112-117

Inversion time
==============
Display the inversion time of the trajectories. For this, make `grid_type="inversion"`.
This helps in obtaining the inversion time when particular region of k-space is sampled, assuming the trajectories are time ordered,
and the argument `turbo_factor` is specified, which is the time between 2 inversion pulses.

.. GENERATED FROM PYTHON SOURCE LINES 117-120

.. code-block:: Python

    create_grid("inversion", trajectories, traj_params, turbo_factor=64)
    plt.suptitle("Inversion Time", y=0.98, x=0.52, fontsize=20)
    plt.show()



.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_003.png
   :alt: Inversion Time, Radial $k_{x}=0$, FLORET $k_{x}=0$, Seiffert Spirals $k_{x}=0$, $k_{y}=0$, $k_{y}=0$, $k_{y}=0$, $k_{z}=0$, $k_{z}=0$, $k_{z}=0$
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 121-126

K-space holes
=============
Display the k-space holes in the trajectories. For this, make `grid_type="holes"`.
K-space holes are areas with missing trajectory coverage, and can typically occur with learning-based trajectories when optimized using a specific loss.
This feature can be used to identify the k-space holes, which could lead to Gibbs-like ringing artifacts in the images.

.. GENERATED FROM PYTHON SOURCE LINES 126-129

.. code-block:: Python

    create_grid("holes", trajectories, traj_params, threshold=1e-2)
    plt.suptitle("K-space Holes", y=0.98, x=0.52, fontsize=20)
    plt.show()



.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_004.png
   :alt: K-space Holes, Radial $k_{x}=0$, FLORET $k_{x}=0$, Seiffert Spirals $k_{x}=0$, $k_{y}=0$, $k_{y}=0$, $k_{y}=0$, $k_{z}=0$, $k_{z}=0$, $k_{z}=0$
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 130-136

Gradient strength
=================
Display the gradient strength of the trajectories. For this, make `grid_type="gradients"`.
This helps in displaying the gradient strength applied at specific k-space region,
which can be used as a surrogate to k-space "velocity", i.e. how fast does trajectory pass through a given region in k-space.
It could be useful while characterizing spatial SNR profile in k-space

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: Python

    create_grid("gradients", trajectories, traj_params)
    plt.suptitle("Gradient Strength", y=0.98, x=0.52, fontsize=20)
    plt.show()




.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_005.png
   :alt: Gradient Strength, Radial $k_{x}=0$, FLORET $k_{x}=0$, Seiffert Spirals $k_{x}=0$, $k_{y}=0$, $k_{y}=0$, $k_{y}=0$, $k_{z}=0$, $k_{z}=0$, $k_{z}=0$
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 141-147

Slew rates
===========
Display the slew rates of the trajectories. For this, make `grid_type="slew"`.
This helps in displaying the slew rates applied at specific k-space region,
which can ne used as a surrogate to k-space "acceleration", i.e. how fast does trajectory change in a given region in k-space
It could be useful to understand potential regions in k-space with eddy current artifacts and trajectories which could lead to peripheral nerve stimulations.

.. GENERATED FROM PYTHON SOURCE LINES 147-150

.. code-block:: Python

    create_grid("slew", trajectories, traj_params)
    plt.suptitle("Slew Rates", y=0.98, x=0.52, fontsize=20)
    plt.show()



.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_006.png
   :alt: Slew Rates, Radial $k_{x}=0$, FLORET $k_{x}=0$, Seiffert Spirals $k_{x}=0$, $k_{y}=0$, $k_{y}=0$, $k_{y}=0$, $k_{z}=0$, $k_{z}=0$, $k_{z}=0$
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_3d_trajectory_display_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:94: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 35.080 seconds)


.. _sphx_glr_download_generated_autoexamples_GPU_example_3d_trajectory_display.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mind-inria/mri-nufft/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/GPU/example_3d_trajectory_display.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_3d_trajectory_display.ipynb <example_3d_trajectory_display.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_3d_trajectory_display.py <example_3d_trajectory_display.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_3d_trajectory_display.zip <example_3d_trajectory_display.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
