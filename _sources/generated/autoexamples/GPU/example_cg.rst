
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/GPU/example_cg.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_GPU_example_cg.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_GPU_example_cg.py:


======================================
Reconstruction with conjugate gradient
======================================

An example to show how to reconstruct volumes using conjugate gradient method.

This script demonstrates the use of the Conjugate Gradient (CG) method
for solving systems of linear equations of the form :math:`Ax = b`, where :math:`A`` is a symmetric
positive-definite matrix. The CG method is an iterative algorithm that is particularly
useful for large, sparse systems where direct methods are computationally expensive.

The Conjugate Gradient method is widely used in various scientific and engineering
applications, including solving partial differential equations, optimization problems,
and machine learning tasks.

This method is inspired by techniques from [SigPy]_ and
[Aquaulb]_ MOOC, as well as general knowledge in [Wikipedia]_.

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. colab-link::
   :needs_gpu: 1

   !pip install mri-nufft[gpunufft] scikit-image

.. GENERATED FROM PYTHON SOURCE LINES 29-30

Imports

.. GENERATED FROM PYTHON SOURCE LINES 30-39

.. code-block:: Python

    import numpy as np
    import cupy as cp
    import mrinufft
    from brainweb_dl import get_mri
    from matplotlib import pyplot as plt
    import os

    BACKEND = os.environ.get("MRINUFFT_BACKEND", "gpunufft")








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Setup Inputs

.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: Python

    samples_loc = mrinufft.initialize_2D_spiral(Nc=64, Ns=512, nb_revolutions=8)
    image = get_mri(sub_id=4)
    image = np.flipud(image[90])
    image_gpu = cp.array(image)  # convert to cupy array for GPU processing








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Setup the NUFFT operator

.. GENERATED FROM PYTHON SOURCE LINES 48-57

.. code-block:: Python

    NufftOperator = mrinufft.get_operator(BACKEND)  # get the operator

    nufft = NufftOperator(
        samples_loc,
        shape=image.shape,
        density=True,
        squeeze_dims=True,
    )  # create the NUFFT operator





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:76: UserWarning: Samples will be rescaled to [-pi, pi), assuming they were in [-0.5, 0.5)
      warnings.warn(
    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/_utils.py:81: UserWarning: Samples will be rescaled to [-0.5, 0.5), assuming they were in [-pi, pi)
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 58-59

Reconstruct the image using the CG method

.. GENERATED FROM PYTHON SOURCE LINES 59-110

.. code-block:: Python

    kspace_data_gpu = nufft.op(image_gpu)  # get the k-space data
    kspace_data = kspace_data_gpu.get()  # convert back to numpy array for display
    dc_adjoint = nufft.adj_op(kspace_data_gpu)  # density compensated adjoint NUFFT
    reconstructed_image, loss = nufft.cg(
        kspace_data=kspace_data_gpu,
        x_init=dc_adjoint.copy(),
        num_iter=50,
        compute_loss=True,
    )

    # convert back to numpy array for display
    reconstructed_image = reconstructed_image.get().squeeze()

    # Display the results
    plt.figure(figsize=(15, 10))
    plt.subplot(2, 3, 1)
    plt.title("Original image")
    plt.imshow(image, cmap="gray")
    plt.colorbar()

    plt.subplot(2, 3, 2)
    plt.title("Conjugate gradient")
    plt.imshow(abs(reconstructed_image), vmin=image.min(), vmax=image.max(), cmap="gray")
    plt.colorbar()

    plt.subplot(2, 3, 3)
    plt.title("Adjoint NUFFT")
    plt.imshow(
        abs(nufft.adj_op(kspace_data)),
        vmin=image.min(),
        vmax=image.max(),
        cmap="gray",
    )
    plt.colorbar()

    plt.subplot(2, 3, 4)
    plt.title("Loss")
    plt.plot(loss.get())
    plt.grid()

    plt.subplot(2, 3, 5)
    plt.title("K-space from conjugate gradient (CG)")
    plt.plot(np.log(abs(kspace_data)), label="Acquired k-space")
    plt.plot(np.log(abs(nufft.op(reconstructed_image))), label="CG k-space")
    plt.legend(loc="lower left", fontsize=8)

    plt.subplot(2, 3, 6)
    plt.title("K-space from DC adjoint NUFFT")
    plt.plot(np.log(abs(kspace_data)), label="Acquired k-space")
    plt.plot(np.log(abs(nufft.op(dc_adjoint).get())), label="DC adjoint k-space")
    plt.legend(loc="lower left", fontsize=8)



.. image-sg:: /generated/autoexamples/GPU/images/sphx_glr_example_cg_001.png
   :alt: Original image, Conjugate gradient, Adjoint NUFFT, Loss, K-space from conjugate gradient (CG), K-space from DC adjoint NUFFT
   :srcset: /generated/autoexamples/GPU/images/sphx_glr_example_cg_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /volatile/github-ci-mind-inria/gpu_mind_runner/_work/mri-nufft/venv/lib/python3.10/site-packages/mrinufft/operators/base.py:857: UserWarning: Lipschitz constant did not converge
      warnings.warn("Lipschitz constant did not converge")

    <matplotlib.legend.Legend object at 0x7c52230c7730>



.. GENERATED FROM PYTHON SOURCE LINES 111-120

References
==========

.. [SigPy] SigPy Documentation. Conjugate Gradient Method.
   https://sigpy.readthedocs.io/en/latest/_modules/sigpy/alg.html#ConjugateGradient
.. [Aquaulb] Aquaulb's MOOC: Solving PDE with Iterative Methods.
   https://aquaulb.github.io/book_solving_pde_mooc/solving_pde_mooc/notebooks/05_IterativeMethods/05_02_Conjugate_Gradient.html
.. [Wikipedia] Wikipedia: Conjugate Gradient Method.
   https://en.wikipedia.org/wiki/Conjugate_gradient_method


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.789 seconds)


.. _sphx_glr_download_generated_autoexamples_GPU_example_cg.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mind-inria/mri-nufft/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/GPU/example_cg.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_cg.ipynb <example_cg.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_cg.py <example_cg.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_cg.zip <example_cg.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
