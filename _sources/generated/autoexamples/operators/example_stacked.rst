
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/autoexamples/operators/example_stacked.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_autoexamples_operators_example_stacked.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_autoexamples_operators_example_stacked.py:


======================
Stacked NUFFT operator
======================

An example to show how to setup a stacked NUFFT operator.

This example shows how to use the stacked NUFFT operator to reconstruct data
when the sampling pattern in k-space is a stack of 2D non-Cartesian trajectories.
Hereafter a stack of 2D spirals is used for demonstration.

.. GENERATED FROM PYTHON SOURCE LINES 13-22

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np

    from mrinufft import display_2D_trajectory

    plt.rcParams["image.cmap"] = "gray"









.. GENERATED FROM PYTHON SOURCE LINES 23-31

Data preparation
================

Image loading
-------------

For realistic 3D images we will use the BrainWeb dataset,
installable using ``pip install brainweb-dl``.

.. GENERATED FROM PYTHON SOURCE LINES 31-37

.. code-block:: Python


    from brainweb_dl import get_mri

    mri_data = get_mri(0, "T1")
    mri_data = np.flip(mri_data, axis=(0, 1, 2))








.. GENERATED FROM PYTHON SOURCE LINES 38-46

.. code-block:: Python


    fig, ax = plt.subplots(1, 3, figsize=(10, 3))
    ax[0].imshow(mri_data[90, :, :])
    ax[1].imshow(mri_data[:, 108, :])
    ax[2].imshow(mri_data[:, :, 90])
    plt.show()





.. image-sg:: /generated/autoexamples/operators/images/sphx_glr_example_stacked_001.png
   :alt: example stacked
   :srcset: /generated/autoexamples/operators/images/sphx_glr_example_stacked_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 47-54

Trajectory generation
---------------------

Only the 2D pattern needs to be initialized, along with
its density to improve the adjoint NUFFT operation and
the location of the different slices.


.. GENERATED FROM PYTHON SOURCE LINES 54-62

.. code-block:: Python


    from mrinufft import initialize_2D_spiral
    from mrinufft.density import voronoi

    samples = initialize_2D_spiral(Nc=16, Ns=500, nb_revolutions=10)
    density = voronoi(samples)
    kz_slices = np.arange(mri_data.shape[-1])  # Specify locations for the stacks.








.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: Python


    display_2D_trajectory(samples)
    plt.show()





.. image-sg:: /generated/autoexamples/operators/images/sphx_glr_example_stacked_002.png
   :alt: example stacked
   :srcset: /generated/autoexamples/operators/images/sphx_glr_example_stacked_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-71

Operator setup
==============

.. GENERATED FROM PYTHON SOURCE LINES 71-91

.. code-block:: Python


    from mrinufft.operators.stacked import MRIStackedNUFFT

    stacked_nufft = MRIStackedNUFFT(
        samples=2 * np.pi * samples,  # normalize for finufft
        shape=mri_data.shape,
        z_index=kz_slices,
        backend="finufft",
        n_coils=1,
        smaps=None,
        density=density,
    )

    kspace_stack = stacked_nufft.op(mri_data)
    print(f"K-space shape: {kspace_stack.shape}")

    mri_data_adj = stacked_nufft.adj_op(kspace_stack)
    mri_data_adj = np.squeeze(abs(mri_data_adj))
    print(f"Volume shape: {mri_data_adj.shape}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    K-space shape: (1, 1, 1448000)
    Volume shape: (181, 217, 181)




.. GENERATED FROM PYTHON SOURCE LINES 92-98

.. code-block:: Python


    fig2, ax2 = plt.subplots(1, 3, figsize=(10, 3))
    ax2[0].imshow(mri_data_adj[90, :, :])
    ax2[1].imshow(mri_data_adj[:, 108, :])
    ax2[2].imshow(mri_data_adj[:, :, 90])
    plt.show()



.. image-sg:: /generated/autoexamples/operators/images/sphx_glr_example_stacked_003.png
   :alt: example stacked
   :srcset: /generated/autoexamples/operators/images/sphx_glr_example_stacked_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.761 seconds)


.. _sphx_glr_download_generated_autoexamples_operators_example_stacked.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mind-inria/mri-nufft/gh-pages?urlpath=lab/tree/examples/generated/autoexamples/operators/example_stacked.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_stacked.ipynb <example_stacked.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_stacked.py <example_stacked.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_stacked.zip <example_stacked.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
