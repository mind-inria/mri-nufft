name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

jobs:
  linter-check:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout 
        uses: actions/checkout@v3
      - name: Set up Python "3.10"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Black setup
        shell: bash
        run: pip install black ruff
      - name: Black Check
        shell: bash
        run: black . --diff --color
      - name: ruff Check
        shell: bash
        run: ruff src
        
  test-cpu:
    runs-on: ubuntu-latest
    needs: linter-check
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.10", "3.8"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        shell: bash
        run: |
          sudo apt install -y libnfft3-dev
          python --version
          python -m pip install --upgrade pip
          python -m pip install -e .[test]

      - name: Install CPU Backends
        shell: bash
        run: |
          python -m pip install finufft pynfft2

      - name: Run Tests
        shell: bash
        run: | 
          coverage run -m pytest -n auto -v
          ls -al
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage.cpu.${{ matrix.python-version}}
          path: .coverage

  test-gpu:
    runs-on: GPU
    needs: linter-check
    strategy:
      fail-fast: true
    steps:
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - uses: actions/checkout@v3

      - name: Install Dependencies
        shell: bash
        run: |
          pwd
          # Ensure we are using cuda 11.8
          export CUDA_PATH=/usr/local/cuda-11.8
          export LD_LIBRARY_PATH=$CUDA_PATH/lib64:$LD_LIBRARY_PATH
          export PATH=$CUDA_PATH/bin:$PATH
          python --version
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -e .[test]

      - name: Install cufinufft
        # This custom installation will ideally be replaced by a pip install.
        shell: bash
        run: |
           cd ..
           rm -rf finufft
           git clone https://github.com/chaithyagr/finufft --branch chaithyagr/issue306
           cd finufft && mkdir build && cd build
           cmake -DFINUFFT_USE_CUDA=1 ../ && make -j && cp libcufinufft.so ../python/cufinufft/.
           cd ../python/cufinufft
           python setup.py install
           # FIXME: This is hardcoded
           cp libcufinufft.so  cufinufftc.cpython-310-x86_64-linux-gnu.so

      - name: Verify that cufinufft is installed
        shell: bash
        run: |
          python -m pip install cupy-cuda11x
          python -m pip freeze
          env
          python -c "import cufinufft; print(cufinufft.__version__)"
          python -c "import cupy; print(cupy.__version__)"

      - name: Run Tests
        shell: bash
        run: |
          python -m coverage run -m pytest -n auto -v
          ls -al
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage.gpu.3.10
          path: .coverage

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          cd ..
          ls -al
          rm -rf finufft
          rm -rf mrinufft

  coverage:
    runs-on: ubuntu-latest
    needs: [test-cpu, test-gpu]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download coverage CPU
        uses: actions/download-artifact@v3
        with:
          name: coverage.cpu.3.10
          path: cov-cpu
      - name: Download coverage GPU
        uses: actions/download-artifact@v3
        with:
          name: coverage.gpu.3.10
          path: cov-gpu

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: add the coverage tool
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install coverage[toml]
          python -m pip install -e .
      - name: Combine coverage
        shell: bash
        run: |
          coverage combine cov-cpu/.coverage cov-gpu/.coverage
          coverage xml -i
          coverage report
          ls -al
